generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  password       String
  profile        Profile?
  workoutPlans   WorkoutPlan[]
  subscriptions  Subscription[]
  nutritionLogs  NutritionLog[]
  parqResponses  ParqResponse[]
  mealPlans      MealPlan[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Profile {
  id                   String   @id @default(uuid())
  user                 User     @relation(fields: [userId], references: [id])
  userId               String   @unique
  name                 String
  age                  Int
  gender               String
  height               Int
  weight               Int
  fitnessGoals         String
  availableEquipment   String[]
  workoutFrequency     Int
  sessionDuration      Int
  experienceLevel      String
  calorieGoal          Int
  activityLevel        String
  dietaryPreferences   String[]
  allergies            String[]
  healthConditions     String[]
  medications          String[]
  physicalLimitations  String[]
  parqCleared          Boolean
  subscriptionTier     String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model WorkoutPlan {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  plan      Json
  createdAt DateTime @default(now())
}

model Plan {
  id    String   @id @default(cuid())
  name  String
  price Float
  subscriptions Subscription[] @relation("PlanSubscriptions")
}

model Payment {
  id             String   @id @default(cuid())
  subscriptionId String
  amount         Float
  date           DateTime @default(now())
  status         String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
}

model Subscription {
  id         String   @id @default(cuid())
  userId     String
  planId     String   // Stripe price ID (also used as Plan relation foreign key)
  plan       String   // Human-readable plan name
  status     String   // e.g. 'active', 'cancelled', 'expired'
  startDate  DateTime
  endDate    DateTime?
  user       User     @relation(fields: [userId], references: [id])
  planRef    Plan?      @relation("PlanSubscriptions", fields: [planId], references: [id])
  payments   Payment[]
}

model NutritionLog {
  id         String   @id @default(cuid())
  userId     String
  date       DateTime @default(now())
  foods      Json     // Array of foods, macros, etc.
  calories   Float
  notes      String?
  macros     Json?    // Stores protein, carbs, fat values
  user       User     @relation(fields: [userId], references: [id])
}

model ContentItem {
  id         String   @id @default(cuid())
  title      String
  type       String   // e.g. 'article', 'tip', 'announcement'
  body       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ParqResponse {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  answers         Json
  flagged         Boolean  @default(false)
  flaggedQuestions String[]
  notes           String[]
  reviewed        Boolean  @default(false)
  reviewedBy      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model MealPlan {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  plan      Json
  createdAt DateTime @default(now())
} 